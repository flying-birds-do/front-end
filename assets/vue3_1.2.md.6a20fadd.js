import{_ as e,c as a,o as n,a as s}from"./app.94e021b8.js";const t="/front-end/assets/lifecycle.e0fdf4d9.png",F=JSON.parse('{"title":"vue2 生命周期","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.beforeCreate","slug":"_1-beforecreate","link":"#_1-beforecreate","children":[]},{"level":2,"title":"2.created","slug":"_2-created","link":"#_2-created","children":[]},{"level":2,"title":"3.beforeMount","slug":"_3-beforemount","link":"#_3-beforemount","children":[]},{"level":2,"title":"4.mounted","slug":"_4-mounted","link":"#_4-mounted","children":[]},{"level":2,"title":"5.beforeUpdate","slug":"_5-beforeupdate","link":"#_5-beforeupdate","children":[]},{"level":2,"title":"6.updated","slug":"_6-updated","link":"#_6-updated","children":[]},{"level":2,"title":"7.activated","slug":"_7-activated","link":"#_7-activated","children":[]},{"level":2,"title":"8.deactivated","slug":"_8-deactivated","link":"#_8-deactivated","children":[]},{"level":2,"title":"9.beforeDestroy","slug":"_9-beforedestroy","link":"#_9-beforedestroy","children":[]},{"level":2,"title":"10.destroyed","slug":"_10-destroyed","link":"#_10-destroyed","children":[]},{"level":2,"title":"11.errorCaptured","slug":"_11-errorcaptured","link":"#_11-errorcaptured","children":[]}],"relativePath":"vue3/1.2.md"}'),r={name:"vue3/1.2.md"},p=s('<h1 id="vue2-生命周期" tabindex="-1">vue2 生命周期 <a class="header-anchor" href="#vue2-生命周期" aria-hidden="true">#</a></h1><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p><p><img src="'+t+`" alt="create"></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_1-beforecreate" tabindex="-1">1.beforeCreate <a class="header-anchor" href="#_1-beforecreate" aria-hidden="true">#</a></h2><p>new Vue() 如图所示,init eventslifecycle &amp; 初始化事件和生命周期. 然后开始执行beforeCreate ,类型：Function,在实例初始化之后,也就是new Vue() 后,进行数据侦听和事件/侦听器的配置 <strong>之前</strong>同步调用。这里的重点是之前,也就是说这里是刚刚实例化之后,事件和监听还没执行.</p><h2 id="_2-created" tabindex="-1">2.created <a class="header-anchor" href="#_2-created" aria-hidden="true">#</a></h2><p>created 类型：Function, 在实例创建完成后被立即同步调用。在这一步中，实例已完成对选项的处理，意味着以下内容已被配置完毕：数据侦听、计算属性、方法、事件/侦听器的回调函数。然而，挂载阶段还没开始，且 $el property 目前尚不可用。</p><h2 id="_3-beforemount" tabindex="-1">3.beforeMount <a class="header-anchor" href="#_3-beforemount" aria-hidden="true">#</a></h2><p>beforeMount 类型：Function.</p><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_4-mounted" tabindex="-1">4.mounted <a class="header-anchor" href="#_4-mounted" aria-hidden="true">#</a></h2><p>mounted 类型：Function.</p><p>实例被挂载后调用，这时 el 被新创建的 vm.$el 替换了。如果根实例挂载到了一个文档内的元素上，当 mounted 被调用时 vm.$el 也在文档内。</p><p>注意 mounted **不会保证所有的子组件也都被挂载完成。**如果你希望等到整个视图都渲染完毕再执行某些操作，可以在 mounted 内部使用 vm.$nextTick：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">mounted</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 仅在整个视图都被渲染之后才会运行的代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_5-beforeupdate" tabindex="-1">5.beforeUpdate <a class="header-anchor" href="#_5-beforeupdate" aria-hidden="true">#</a></h2><p>beforeUpdate,类型：Function. 在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</p><p>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务器端进行。</p><h2 id="_6-updated" tabindex="-1">6.updated <a class="header-anchor" href="#_6-updated" aria-hidden="true">#</a></h2><p>updated,类型：Function.</p><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><p>注意，**updated 不会保证所有的子组件也都被重新渲染完毕。**如果你希望等到整个视图都渲染完毕，可以在 updated 里使用 vm.这里要注意,mounted 和这个的相似之处.一个是不能保证所有的子组件都挂载,一个是不能保证所有子组件都被重新渲染.$nextTick：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">updated</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//  仅在整个视图都被重新渲染之后才会运行的代码     </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_7-activated" tabindex="-1">7.activated <a class="header-anchor" href="#_7-activated" aria-hidden="true">#</a></h2><p>activated.类型：Function.</p><p>被 keep-alive 缓存的组件激活时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_8-deactivated" tabindex="-1">8.deactivated <a class="header-anchor" href="#_8-deactivated" aria-hidden="true">#</a></h2><p>deactivated 类型：Function.</p><p>被 keep-alive 缓存的组件失活时调用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_9-beforedestroy" tabindex="-1">9.beforeDestroy <a class="header-anchor" href="#_9-beforedestroy" aria-hidden="true">#</a></h2><p>beforeDestroy.类型：Function</p><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_10-destroyed" tabindex="-1">10.destroyed <a class="header-anchor" href="#_10-destroyed" aria-hidden="true">#</a></h2><p>destroyed . 类型：Function</p><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p><p><strong>该钩子在服务器端渲染期间不被调用。</strong></p><h2 id="_11-errorcaptured" tabindex="-1">11.errorCaptured <a class="header-anchor" href="#_11-errorcaptured" aria-hidden="true">#</a></h2><p>类型：(err: Error, vm: Component, info: string) =&gt; ?boolean</p><p>在捕获一个来自后代组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><p>你可以在此钩子中修改组件的状态。因此在捕获错误时，在模板或渲染函数中有一个条件判断来绕过其它内容就很重要；不然该组件可能会进入一个无限的渲染循环。</p><p>错误传播规则</p><p>默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报。</p><p>如果一个组件的 inheritance chain (继承链)或 parent chain (父链)中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。</p><p>如果此 errorCaptured 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 config.errorHandler。</p><p>一个 errorCaptured 钩子能够返回 false 以阻止错误继续向上传播。本质上是说“这个错误已经被搞定了且应该被忽略”。它会阻止其它任何会被这个错误唤起的 errorCaptured 钩子和全局的 config.errorHandler。</p>`,52),o=[p];function l(c,d,i,u,h,y){return n(),a("div",null,o)}const f=e(r,[["render",l]]);export{F as __pageData,f as default};
